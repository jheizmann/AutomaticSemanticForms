<?php
/*
 * Copyright (C) Vulcan Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program.If not, see <http://www.gnu.org/licenses/>.
 *
 */


/*
 * This file provides some methods, that are called by
 * the ASF special page via Ajax.
 */

global $wgAjaxExportList;
$wgAjaxExportList[] = 'asff_getFormPreview';
$wgAjaxExportList[] = 'asff_saveForm';
$wgAjaxExportList[] = 'asff_checkFormName';

/*
 * Load asf preview and source code
 */
function asff_getFormPreview($categories){

	$categories = explode(';', $categories);

	$result = ASFFormGenerator::getInstance()->generateFormForCategories($categories);

	if($result){
		global $asfDummyFormName;
		$errors = ASFFormGeneratorUtils::createFormDummyIfNecessary();
		$form_name = $asfDummyFormName;

		$target_name = SFUtils::titleString( Title::newFromText('xyz'));
		SFFormEdit::printForm( $form_name, $target_name );

		global $wgOut;
		$formHTML = $wgOut->mBodytext;
		$formHTML = substr($formHTML, strpos($formHTML, '<fieldset'));
		$formHTML = '<form name="createbox" id="sfForm" action="" method="post" class="createbox">' . $formHTML;
		$formHTML = substr($formHTML, 0, strrpos($formHTML, '</fieldset'));
		$formDefinition = substr($formDefinition, 0, strpos($formDefinition, wfMsg('asf_autogenerated_msg')));

		//deal with scripts
		global $wgOut;
		$scripts = $wgOut->getScript();
		$scripts = explode("</script>", $scripts);
		
		unset($scripts[0]);
		foreach($scripts as $key => $script){
			if(strpos($script, 'SemanticForms_registerInputInit') > 0){
				$scripts[] = $script;
				unset($scripts[$key]);
			}
		}
		$scripts = implode("</script>", $scripts);
		$formHTML .= $scripts;
		
		$success = 'true';
	} else {
		//todo: Language
		$formHTML = $formDefinition = 'A Semantic Form could not be created for the chosen categories.';
		$success = 'false';
		$skins = '';
	}
	
	$formDefinition = ASFFormGeneratorUtils::retranslateParseSaveLink($formDefinition);

	$response = array('preview' => $formHTML, 'source' => $formDefinition, 'skins' => $skins, 'success' => $success);
	$response = json_encode($response);
	$response = '--##startasf##--'.$response.'--##endasf##--';

	return $response;
}


function asff_saveForm($formName, $formDefinition){
	global $wgContLang;
	if(strpos($formName, $wgContLang->getNsText(SF_NS_FORM).':') !== 0){
		$formName = $wgContLang->getNsText(SF_NS_FORM).':'.$formName;
	}

	$title = Title::newFromText($formName);

	global $wgUser;
	if(!is_null($title) && smwf_om_EditArticle($title->getFullText(), $wgUser, $formDefinition, '')){
		$linker = new Linker();
		$title = $linker->makeLink($title->getFullText());
		$success = 'true';
	} else {
		$title = $formName;
		$success = 'false';
	}

	$response = array('title' => $title, 'success' => $success);
	$response = json_encode($response);
	$response = '--##startasf##--'.$response.'--##endasf##--';

	return $response;
}


function asff_checkFormName($formName){
	global $wgContLang;
	if(strpos($formName, $wgContLang->getNsText(SF_NS_FORM).':') !== 0){
		$formName = $wgContLang->getNsText(SF_NS_FORM).':'.$formName;
	}

	$title = Title::newFromText($formName);

	$response = '';
	if(!is_null($title) && $title->exists()){
		$response = 'exists';
	}

	$response = '--##startasf##--'.$response.'--##endasf##--';

	return $response;
}





